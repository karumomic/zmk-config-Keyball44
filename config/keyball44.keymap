#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        df_return {
            bindings = <&kp LA(TAB)>;
            key-positions = <16 14>;
            layers = <0>;
        };

        retr {
            bindings = <&kp RET>;
            key-positions = <16 15>;
        };
    };

    macros {
        shimo: shimo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LS(J) &kp S &kp H &kp I &kp M &kp O>;

            label = "SHIMO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp ESCAPE  &kp Q      &kp W        &kp E                      &kp R      &kp T                     &kp Y         &kp U  &kp I      &kp O    &kp MINUS  &kp COLON
&mo 2       &lt 4 A    &lt 5 S      &kp D                      &kp F      &kp G                     &kp H         &kp J  &kp K      &lt 1 L  &lt 3 P    &kp SEMICOLON
&mo 6       &kp Z      &kp X        &kp C                      &kp V      &kp B                     &kp N         &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp UNDER
&kp LGUI    &kp LCTRL  &lt 7 SPACE  &mt LEFT_SHIFT LANGUAGE_2  &kp LANG1             &kp BACKSPACE  &lt 1 RETURN                                        &shimo
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp KP_NUMLOCK   &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans              &trans  &trans     &kp ASTRK  &kp SLASH     &trans  &trans
&trans           &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans              &trans  &kp EQUAL  &kp PLUS   &kp ASTERISK  &trans  &trans
&trans           &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans              &trans  &kp CARET  &trans     &trans        &trans  &trans
&kp KP_NUMBER_0  &trans  &trans           &trans           &trans                       &trans  &trans                                              &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&none   &trans      &kp GRAVE     &kp SLASH     &kp ASTRK     &trans                     &kp CARET    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT            &kp AT_SIGN           &kp PIPE
&none   &none       &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(LS(V))              &kp PERCENT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp SQT               &kp DOLLAR
&none   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                     &kp TILDE    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EXCLAMATION    &kp NON_US_BACKSLASH  &kp UNDERSCORE
&trans  &trans      &trans        &trans        &trans                           &trans  &trans                                                                                             &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none       &kp F1  &kp F2   &kp F3   &kp F4   &none              &none   &none  &none  &none  &none  &none
&none       &kp F5  &kp F6   &kp F7   &kp F8   &none              &none   &none  &none  &none  &none  &none
&none       &kp F9  &kp F10  &kp F11  &kp F12  &none              &none   &none  &none  &none  &none  &none
&kp K_LOCK  &trans  &trans   &trans   &trans              &trans  &trans                              &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &none   &none      &kp LC(Z)   &kp LC(Y)  &none                      &none          &none      &none      &kp BACKSPACE  &none      &none
&none   &none   &kp LS(X)  &kp LC(C)   &kp LC(V)  &kp LC(LS(V))              &kp PAGE_UP    &mkp LCLK  &mkp RCLK  &none          &mkp MCLK  &none
&none   &none   &none      &none       &none      &none                      &kp PAGE_DOWN  &none      &none      &kp DELETE     &none      &none
&trans  &trans  &trans     &kp RETURN  &trans                        &trans  &trans                                                         &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };

        SNIPELAYER {
            label = "snipe";
            bindings = <
&trans  &trans  &trans     &kp LC(Z)   &kp LC(Y)  &trans                     &trans         &trans     &trans     &kp BACKSPACE  &trans     &trans
&trans  &trans  &kp LS(X)  &kp LC(C)   &kp LC(V)  &kp LC(LS(V))              &kp PAGE_UP    &mkp LCLK  &mkp RCLK  &trans         &mkp MCLK  &trans
&trans  &trans  &trans     &trans      &trans     &trans                     &kp PAGE_DOWN  &trans     &trans     &kp DELETE     &trans     &trans
&trans  &trans  &trans     &kp RETURN  &trans                        &trans  &trans                                                         &trans
            >;
        };

        ArrowLayer {
            bindings = <
&trans  &trans     &trans     &kp LC(Z)  &kp LC(Y)  &trans                     &trans           &trans          &kp UP_ARROW    &kp BACKSPACE    &trans  &trans
&trans  &kp LCTRL  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(V))              &trans           &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans     &trans     &trans     &trans     &trans                     &trans           &trans          &trans          &kp DELETE       &trans  &trans
&trans  &trans     &trans     &trans     &trans                        &trans  &kp RIGHT_SHIFT                                                           &trans
            >;
        };
    };
};
